relocateable_Forth.txt

Confidence level: wild speculation - do not obstruct this. ;)

The plan:

Construct .hex output program in Forth, on the
STM32F405 target running eForth.

Construct the simplest possible TX/RX USART setup
program, in support of the target USART within the
F405 (use the TX/RX labeled pins for this).

Construct a simple echo loop (pseudo text interpreter II)
using the new USART, in eForth.

Do that in a way that can be used as a .bin upload
(dfu-util) to another STM32F405 device (or this one,
at a new location in memory).

Since dfu-util does not zap old programs that were stored
in high flashROM space, it should be possible to have
two entirely independent images on flashROM, but in
different sectors.  Probably go above the first 16k;
maybe above the first 24k (save three sectors for the
first eForth - the main one at this juncture; using the
fourth sector for the new Forth primitive).

IN SOME MANNER get the new TX/RX pair going.  Go ahead
and write this is ordinary (non-assembler oriented)
eForth dialect.  Prove that a new TX/RX pair can be used
as a second loop/echo (use another machine to talk to
it, or hot-swap the TX/RX pairs, with DPDT from the
host machine with the controlling tty).

Try real hard to write an independent program that can
be reaped as a binary (using .hex conversion as required,
if this isn't too chicken/egg-ish).

At some point (hand waving how it got done) the idea is
to have a simple loop running that echo's keystrokes
back to the host PC with the controlling tty.

II.

So, ideally, a binary that is uploaded to the target, that
does all its own setups to get a simple loop-echo going
on STM32F405.

Not sure which address space to put this in, but it will
probably run on the end-point USART (the one meant for
a full Forth, later in development).

This is proof-of-concept stuff.

The longer goal might be to be writing an assembler base
(decoding a few instructions written in pseudo-assembler,
on the target itself, in a full eForth interpreter).

Perhaps .. perhaps .. eForth itself is relocated to start
at the second sector (maybe the third sector) so that it
is not in the way of the assembled image (in active memory,
low as it goes in address space, where eForth resides now).

At every point, a .hex output is required to export the
code outside the target, to be reloaded back into the
target (almost immediately) to demonstrate a loadable
Forth/system at each (major) step.

The main idea is to write a new Forth, in Forth, bypassing
the entire upstream toolchain used (which isn't quite
OpenSourced) when constructing the most base system
possible.

Eventually, this Forth might be able to bootstrap itself
(code itself) or a similar idea that only leverages tools
that are distributed with the host PC's operating system
(Debian Linux) along with tools that do not require special
(commercial) licensing (ARM toolchain eabi okay as it has
been useful all along in many contexts, such as the Arduino IDE
and in Atmel Start (for SAMD21/SAMD51, separate topic here ;)

III.

IN the earliest stages, hand-wave all concerns regarding the
various address spaces/memory maps and just get the new USART
going, and talk to it.

This should be a straighforward exercise in writing to
specific addresses, using the @ (fetch) and ! (store)
words, as with (already demonstrated) GPIO setup (D13 in
Arduino-land, already done as of this writing).

At some point, under eForth as it is today, a second connection
to the target board is made, electrically, talking to the new
TX/RX pair (targeted as the default port Adafruit is using
on this target for the USART, and labled as such -- probably
the D0/D1 pair, as in other Feather form-factor targets are
laid out).

Thu Jan  2 16:13:56 UTC 2020



END.
